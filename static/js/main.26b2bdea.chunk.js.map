{"version":3,"sources":["hooks/useKeypress.tsx","Grid/Grid.tsx","shared/constants.tsx","Modal/Modal.tsx","Page/Page.tsx","App.tsx","index.tsx"],"names":["Direction","Grid","props","gridData","squares","row","rowContainer","column","push","renderSquare","className","col","status","isCurrentSquare","goalSquare","letter","toUpperCase","directions","direction","DOWN","keys","UP","LEFT","RIGHT","useKeyPress","action","useEffect","onKeyup","event","key","directionObj","find","group","some","window","addEventListener","removeEventListener","Modal","isPlayingStatus","winStatus","currentWord","onClick","restart","blankGrid","start","goal","grid","rowArray","square","coords","Page","useState","lastDirection","setLastDirection","lastKeyPressed","setLastKeyPressed","setCurrentWord","isCurrentWordValid","setIsCurrentWordValid","setGrid","isCheckingStatus","setIsCheckingStatus","setIsPlayingStatus","setWinStatus","makeMove","a","length","axios","result","data","fetchData","then","getCurrentSquare","console","log","newSquare","newGrid","currentSquare","WIDTH","previousSquare","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAEYA,E,8GCsCGC,EApCF,SAACC,GAIZ,IAHA,IAAMC,EAA4BD,EAAMC,SAElCC,EAAyB,GACvBC,EAAM,EAAGA,ECRE,EDQWA,IAAO,CAEnC,IADA,IAAMC,EAA8B,GAC5BC,EAAS,EAAGA,ECVH,EDUmBA,IAClCD,EAAaE,KACX,+BAAOC,EAAaJ,EAAKE,MAG7BH,EAAQI,KACN,qBAAKE,UAAU,MAAf,SAAsBJ,KAI1B,SAASG,EAAaJ,EAAaM,GACjC,IAAMC,EAAST,EAASE,GAAKM,GAC7B,OACE,qBAAKD,WACFE,EAAOC,gBAAkB,WAAa,KACtCD,EAAOE,WAAa,QAAU,IAC/B,SAHF,SAKGF,EAAOG,OAAOC,gBAKrB,OACE,qBAAKN,UAAU,OAAf,SACGN,M,SDjCKJ,O,eAAAA,I,WAAAA,I,eAAAA,I,kBAAAA,M,KAYZ,IAAMiB,EAAuB,CAC3B,CACEC,UAAWlB,EAAUmB,KACrBC,KAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAEjC,CACEF,UAAWlB,EAAUqB,GACrBD,KAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAEjC,CACEF,UAAWlB,EAAUsB,KACrBF,KAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,MAE7B,CACEF,UAAWlB,EAAUuB,MACrBH,KAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,OAIhB,SAASI,EAAYC,GAClCC,qBAAU,WACR,SAASC,EAAQC,GACf,IAUkBC,EAVZC,GAUYD,EAVkBD,EAAMC,IAWvCZ,EAAWc,MAAK,SAACC,GAEtB,OADoBA,EAAMZ,KAAKa,MAAK,SAAClB,GAAD,OAAYA,IAAWc,KACtCG,EAAQ,SAZvBF,GACFL,EAAOG,EAAMC,IAAKC,EAAaZ,WAInC,OADAgB,OAAOC,iBAAiB,QAASR,GAC1B,kBAAMO,OAAOE,oBAAoB,QAAST,O,UGvBtCU,EAjBD,SAACnC,GAMb,OACE,qBAAKQ,WAAYR,EAAMoC,gBAAkB,UAAY,IAAM,QAA3D,SACE,sBAAK5B,UAAU,MAAf,UACE,6BAAKR,EAAMqC,UAAY,YAAc,YACrC,8BAAIrC,EAAMsC,YAAYxB,cAAed,EAAMqC,UAAY,mBAAqB,0BAC5E,wBAAQE,QAASvC,EAAMwC,QAAvB,2BCOFC,G,MAAY,SAACC,EAAeC,GAEhC,IADA,IAAMC,EAAwB,GACrBzC,EAAM,EAAGA,EFtBC,EEsBYA,IAAO,CAEpC,IADA,IAAM0C,EAA0B,GACvBpC,EAAM,EAAGA,EFxBD,EEwBcA,IAAO,CACpC,IAAMqC,EAAsB,CAC1BnC,gBAAkB+B,EAAMvC,MAAQA,GAAOuC,EAAMjC,MAAQA,EACrDG,WAAa+B,EAAKxC,MAAQA,GAAOwC,EAAKlC,MAAQA,EAC9CI,OAAQ,GACRkC,OAAQ,CAAC5C,MAAKM,QAEhBoC,EAASvC,KAAKwC,GAEhBF,EAAKtC,KAAKuC,GAEZ,OAAOD,IAsHMI,EAnHF,WACX,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOX,EAAP,KAAoBgB,EAApB,KACA,EAAoDL,oBAAS,GAA7D,mBAAOM,EAAP,KAA2BC,EAA3B,KACA,EAAwBP,mBAASR,EAAU,CAACtC,IAAI,EAAGM,IAAI,GAAI,CAACN,IAAI,EAAGM,IAAI,KAAvE,mBAAOmC,EAAP,KAAaa,EAAb,KACA,EAAgDR,oBAAS,GAAzD,mBAAOS,EAAP,KAAyBC,EAAzB,KACA,EAA8CV,oBAAS,GAAvD,mBAAOb,EAAP,KAAwBwB,EAAxB,KACA,EAAkCX,oBAAS,GAA3C,mBAAOZ,EAAP,KAAkBwB,EAAlB,KAEAvC,GAAY,SAACK,EAAaX,GACxB8C,EAASnC,EAAKX,MAGhBQ,qBAAU,WACRmC,GAAoB,GACL,uCAAG,4BAAAI,EAAA,2DACZzB,EAAY0B,OAAS,GADT,gCAEOC,IAAM,qCAAD,OACa3B,EADb,gBAFZ,OAER4B,EAFQ,OAMdV,EACEU,EAAOC,KAAK,IAAMD,EAAOC,KAAK,GAAZ,MAClBD,EAAOC,KAAK,GAAZ,KAAuBH,OAAS,IAAK,GARzB,sBAWdR,GAAsB,GAXR,2CAAH,oDAcfY,GAAYC,MAAK,WACfV,GAAoB,QAErB,CAACrB,IAEJd,qBAAU,YACiB,IAArBkC,GAA8BY,IAAmB1D,aACnD2D,QAAQC,IAAR,qBAAkCjB,GAClCM,EAAaN,GACbK,GAAmB,MAEpB,CAACF,IAEJ,IAAMI,EAAW,SAACnC,EAAaX,GAC7B,IAGIyD,EAHEC,EAAU9B,EACV+B,EAAgBL,IAGtB,OAAQtD,GACN,KAAKlB,EAAUqB,GACb,GAAkC,KAAjB,OAAbwD,QAAa,IAAbA,OAAA,EAAAA,EAAe5B,OAAO5C,KAAW,OACrCsE,EAAY7B,EAAK+B,EAAe5B,OAAO5C,IAAM,GAAGwE,EAAe5B,OAAOtC,KACtE,MACF,KAAKX,EAAUmB,KACb,GAAkC2D,KAAjB,OAAbD,QAAa,IAAbA,OAAA,EAAAA,EAAe5B,OAAO5C,KAAmB,OAC7CsE,EAAY7B,EAAK+B,EAAe5B,OAAO5C,IAAM,GAAGwE,EAAe5B,OAAOtC,KACtE,MACF,KAAKX,EAAUsB,KACb,GAAkC,KAAjB,OAAbuD,QAAa,IAAbA,OAAA,EAAAA,EAAe5B,OAAOtC,KAAW,OACrCgE,EAAY7B,EAAK+B,EAAe5B,OAAO5C,KAAKwE,EAAe5B,OAAOtC,IAAM,GACxE,MACF,KAAKX,EAAUuB,MACb,GAAkCuD,KAAjB,OAAbD,QAAa,IAAbA,OAAA,EAAAA,EAAe5B,OAAOtC,KAAmB,OAC7CgE,EAAY7B,EAAK+B,EAAe5B,OAAO5C,KAAKwE,EAAe5B,OAAOtC,IAAM,GAI5E,IAAIgE,EAAU5D,OAAd,CAGA4D,EAAU9D,iBAAkB,EAC5B+D,EAAQD,EAAU1B,OAAO5C,KAAKsE,EAAU1B,OAAOtC,KAAOgE,EAEtD,IAAMI,EAAiBH,EAAQC,EAAe5B,OAAO5C,KAAKwE,EAAe5B,OAAOtC,KAChFoE,EAAelE,iBAAkB,EACjCkE,EAAehE,OAASc,EAExB2B,EAAehB,EAAcX,GAC7B0B,EAAkB1B,GAClBwB,EAAiB,GAAD,OAAInC,IACpByC,EAAQiB,KAGJlC,EAAU,WACdc,EAAe,IACfH,EAAiB,IACjBE,EAAkB,IAClBI,EAAQhB,EAAU,CAACtC,IAAI,EAAGM,IAAI,GAAI,CAACN,IAAI,EAAGM,IAAI,KAC9CmD,GAAmB,GACnBC,GAAa,IAGTS,EAAmB,WAEvB,OADmB1B,EAAKf,MAAK,SAAA1B,GAAG,OAAIA,EAAI4B,MAAK,SAAAe,GAAM,OAA+B,IAA3BA,EAAOnC,sBAC5CkB,MAAK,SAAAiB,GAAM,OAAIA,EAAOnC,oBAG1C,OACE,oCACE,sBAAKH,UAAU,OAAf,UACE,6CAAgB0C,KAChB,oDAAuBE,KACvB,gDAAmBd,KACnB,wDAA2BiB,EAAqB,MAAQ,QAExD,wBAAQhB,QAASC,EAAjB,wBAIF,cAAC,EAAD,CAAMvC,SAAU2C,IAChB,cAAC,EAAD,CAAOR,gBAAiBA,EAAiBC,UAAWA,EAAWC,YAAaA,EAAaE,QAASA,QCjIzFsC,MAhBf,WACE,OACE,sBAAKtE,UAAU,MAAf,UACE,iCACE,2CAEF,+BACE,cAAC,EAAD,MAEF,iCACE,gDCRRuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.26b2bdea.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nexport enum Direction {\n  'DOWN',\n  'UP',\n  'LEFT',\n  'RIGHT'\n}\n\nexport interface keySet {\n  direction: Direction,\n  keys: string[]\n}\n\nconst directions: keySet[] = [\n  {\n    direction: Direction.DOWN,\n    keys: ['c','v','b','n','j','h','g']\n  },\n  {\n    direction: Direction.UP,\n    keys: ['e','r','t','y','u','d','f']\n  },\n  {\n    direction: Direction.LEFT,\n    keys: ['q','w','a','s','z','x']\n  },\n  {\n    direction: Direction.RIGHT,\n    keys: ['i','o','p','k','l','m']\n  }\n];\n\nexport default function useKeyPress(action: any) {\n  useEffect(() => {\n    function onKeyup(event: KeyboardEvent) {\n      const directionObj = checkDirection(event.key);\n      if (directionObj) {\n        action(event.key, directionObj.direction);\n      }\n    }\n    window.addEventListener('keyup', onKeyup);\n    return () => window.removeEventListener('keyup', onKeyup);\n  });\n}\n\nfunction checkDirection(key:string): keySet | undefined {\n  return directions.find((group) => {\n    const containsKey = group.keys.some((letter) => letter === key);\n    return containsKey ? group : null;\n  });\n}","import { SquareState } from '../Page/Page';\nimport { WIDTH } from '../shared/constants';\nimport './Grid.scss';\n\nconst Grid = (props: any) => {\n  const gridData: SquareState[][] = props.gridData\n\n  const squares: JSX.Element[] = [];\n  for(let row = 0; row < WIDTH; row++) {\n    const rowContainer: JSX.Element[] = [];\n    for(let column = 0; column < WIDTH; column++) {\n      rowContainer.push(\n        <span>{renderSquare(row, column)}</span>\n      );\n    }\n    squares.push(\n      <div className=\"row\">{rowContainer}</div>\n    );\n  };\n\n  function renderSquare(row: number, col: number) {\n    const status = gridData[row][col];\n    return (\n      <div className={\n        (status.isCurrentSquare ? 'current ' : '') +\n        (status.goalSquare ? 'goal ' : '') +\n        'square'\n      }>\n        {status.letter.toUpperCase()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid\">\n      {squares}\n    </div>\n  );\n}\n\nexport default Grid;\n","export const WIDTH = 5;\n","import './Modal.scss';\n\nconst Modal = (props: {\n  isPlayingStatus: boolean,\n  winStatus: boolean,\n  currentWord: string,\n  restart: any\n}) => {\n  return (\n    <div className={(props.isPlayingStatus ? 'hidden ' : '') + 'modal'}>\n      <div className=\"box\">\n        <h1>{props.winStatus ? 'Well done' : 'Unlucky'}</h1>\n        <p>{props.currentWord.toUpperCase()}{props.winStatus ? ' is a valid word' : ' is not a valid word'}</p>\n        <button onClick={props.restart}>RESTART</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Modal;\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Grid from '../Grid/Grid';\nimport useKeyPress, { Direction } from '../hooks/useKeypress';\nimport Modal from '../Modal/Modal';\nimport { WIDTH } from '../shared/constants';\nimport './Page.scss';\n\nexport interface Coords {\n  row: number;\n  col: number;\n}\n\nexport interface SquareState {\n  isCurrentSquare: boolean;\n  goalSquare: boolean;\n  letter: string;\n  coords: Coords;\n}\n\nconst blankGrid = (start: Coords, goal: Coords): SquareState[][] => {\n  const grid: SquareState[][] = [];\n  for (let row = 0; row < WIDTH; row++) {\n    const rowArray: SquareState[] = [];\n    for (let col = 0; col < WIDTH; col++) {\n      const square: SquareState = {\n        isCurrentSquare: (start.row === row && start.col === col),\n        goalSquare: (goal.row === row && goal.col === col),\n        letter: '',\n        coords: {row, col}\n      };\n      rowArray.push(square);\n    }\n    grid.push(rowArray);\n  }\n  return grid;\n}\n\nconst Page = () => {\n  const [lastDirection, setLastDirection] = useState('');\n  const [lastKeyPressed, setLastKeyPressed] = useState('');\n  const [currentWord, setCurrentWord] = useState('');\n  const [isCurrentWordValid, setIsCurrentWordValid] = useState(false);\n  const [grid, setGrid] = useState(blankGrid({row:3, col:0}, {row:1, col:4}));\n  const [isCheckingStatus, setIsCheckingStatus] = useState(false);\n  const [isPlayingStatus, setIsPlayingStatus] = useState(true);\n  const [winStatus, setWinStatus] = useState(false);\n\n  useKeyPress((key: string, direction: Direction)=> {\n    makeMove(key, direction);\n  });\n\n  useEffect(() => {\n    setIsCheckingStatus(true);\n    const fetchData = async () => {\n      if (currentWord.length > 2) {\n        const result = await axios(\n          `https://api.datamuse.com/words?sp=${currentWord}&md=d&max=1`,\n        );\n  \n        setIsCurrentWordValid(\n          result.data[0] && result.data[0]['defs'] &&\n          result.data[0]['defs'].length > 0 || false\n        );\n      } else {\n        setIsCurrentWordValid(false);\n      }\n    };\n    fetchData().then(() => {\n      setIsCheckingStatus(false);\n    });\n  }, [currentWord]);\n\n  useEffect(() => {\n    if (isCheckingStatus === false && getCurrentSquare().goalSquare) {\n      console.log(`Goal reached. WIN?`, isCurrentWordValid);\n      setWinStatus(isCurrentWordValid);\n      setIsPlayingStatus(false);\n    }\n  }, [isCheckingStatus]);\n\n  const makeMove = (key: string, direction: Direction) => {\n    const newGrid = grid;\n    const currentSquare = getCurrentSquare();\n    \n    let newSquare: SquareState; \n    switch (direction) {\n      case Direction.UP:\n        if (currentSquare?.coords.row === 0) return;\n        newSquare = grid[currentSquare!.coords.row - 1][currentSquare!.coords.col];\n        break;\n      case Direction.DOWN:\n        if (currentSquare?.coords.row === WIDTH - 1) return;\n        newSquare = grid[currentSquare!.coords.row + 1][currentSquare!.coords.col];\n        break;\n      case Direction.LEFT:\n        if (currentSquare?.coords.col === 0) return;\n        newSquare = grid[currentSquare!.coords.row][currentSquare!.coords.col - 1];\n        break;\n      case Direction.RIGHT:\n        if (currentSquare?.coords.col === WIDTH - 1) return;\n        newSquare = grid[currentSquare!.coords.row][currentSquare!.coords.col + 1];\n        break;\n    }\n\n    if (newSquare.letter) return;\n\n    // Set newSquare in newGrid & wipe old one\n    newSquare.isCurrentSquare = true;\n    newGrid[newSquare.coords.row][newSquare.coords.col] = newSquare;\n\n    const previousSquare = newGrid[currentSquare!.coords.row][currentSquare!.coords.col];\n    previousSquare.isCurrentSquare = false;\n    previousSquare.letter = key;\n\n    setCurrentWord(currentWord + key)\n    setLastKeyPressed(key);\n    setLastDirection(`${direction}`);\n    setGrid(newGrid);\n  }\n\n  const restart = () => {\n    setCurrentWord('');\n    setLastDirection('');\n    setLastKeyPressed('');\n    setGrid(blankGrid({row:3, col:0}, {row:1, col:4}));\n    setIsPlayingStatus(true);\n    setWinStatus(false);\n  }\n\n  const getCurrentSquare = (): SquareState => {\n    const currentRow = grid.find(row => row.some(square => square.isCurrentSquare === true))!;\n    return currentRow.find(square => square.isCurrentSquare)!;\n  };\n\n  return (\n    <section>\n      <div className=\"info\">\n        <p>Direction = {lastDirection}</p>\n        <p>Last key pressed = {lastKeyPressed}</p>\n        <p>Current word = {currentWord}</p>\n        <p>Is this a valid word?: {isCurrentWordValid ? 'YES' : 'NO'}</p>\n        \n        <button onClick={restart}>\n          Restart\n        </button>\n      </div>\n      <Grid gridData={grid} />\n      <Modal isPlayingStatus={isPlayingStatus} winStatus={winStatus} currentWord={currentWord} restart={restart} />\n    </section>\n  );\n}\n\nexport default Page;\n","import './App.scss';\nimport Page from './Page/Page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>O-Right</h1>\n      </header>\n      <main>\n        <Page />\n      </main>\n      <footer>\n        <p>Copyright</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}